// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AvatarSet extends ethereum.Event {
  get params(): AvatarSet__Params {
    return new AvatarSet__Params(this);
  }
}

export class AvatarSet__Params {
  _event: AvatarSet;

  constructor(event: AvatarSet) {
    this._event = event;
  }

  get previousAvatar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAvatar(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CapSet extends ethereum.Event {
  get params(): CapSet__Params {
    return new CapSet__Params(this);
  }
}

export class CapSet__Params {
  _event: CapSet;

  constructor(event: CapSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newCap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangeAssetStatus extends ethereum.Event {
  get params(): ChangeAssetStatus__Params {
    return new ChangeAssetStatus__Params(this);
  }
}

export class ChangeAssetStatus__Params {
  _event: ChangeAssetStatus;

  constructor(event: ChangeAssetStatus) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ChangedGuard extends ethereum.Event {
  get params(): ChangedGuard__Params {
    return new ChangedGuard__Params(this);
  }
}

export class ChangedGuard__Params {
  _event: ChangedGuard;

  constructor(event: ChangedGuard) {
    this._event = event;
  }

  get guard(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CloseRound extends ethereum.Event {
  get params(): CloseRound__Params {
    return new CloseRound__Params(this);
  }
}

export class CloseRound__Params {
  _event: CloseRound;

  constructor(event: CloseRound) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get round(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get SharePerUnit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lockedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CollectVaultFee extends ethereum.Event {
  get params(): CollectVaultFee__Params {
    return new CollectVaultFee__Params(this);
  }
}

export class CollectVaultFee__Params {
  _event: CollectVaultFee;

  constructor(event: CollectVaultFee) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CreateToken extends ethereum.Event {
  get params(): CreateToken__Params {
    return new CreateToken__Params(this);
  }
}

export class CreateToken__Params {
  _event: CreateToken;

  constructor(event: CreateToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenName(): string {
    return this._event.parameters[2].value.toString();
  }

  get tokenSymbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get decimal(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tokenCap(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class InitiateStandardWithdrawal extends ethereum.Event {
  get params(): InitiateStandardWithdrawal__Params {
    return new InitiateStandardWithdrawal__Params(this);
  }
}

export class InitiateStandardWithdrawal__Params {
  _event: InitiateStandardWithdrawal;

  constructor(event: InitiateStandardWithdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InstantWithdrawal extends ethereum.Event {
  get params(): InstantWithdrawal__Params {
    return new InstantWithdrawal__Params(this);
  }
}

export class InstantWithdrawal__Params {
  _event: InstantWithdrawal;

  constructor(event: InstantWithdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currentRound(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ManagementFeeSet extends ethereum.Event {
  get params(): ManagementFeeSet__Params {
    return new ManagementFeeSet__Params(this);
  }
}

export class ManagementFeeSet__Params {
  _event: ManagementFeeSet;

  constructor(event: ManagementFeeSet) {
    this._event = event;
  }

  get managementFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newManagementFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PerformanceFeeSet extends ethereum.Event {
  get params(): PerformanceFeeSet__Params {
    return new PerformanceFeeSet__Params(this);
  }
}

export class PerformanceFeeSet__Params {
  _event: PerformanceFeeSet;

  constructor(event: PerformanceFeeSet) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPerformanceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StandardWithdrawal extends ethereum.Event {
  get params(): StandardWithdrawal__Params {
    return new StandardWithdrawal__Params(this);
  }
}

export class StandardWithdrawal__Params {
  _event: StandardWithdrawal;

  constructor(event: StandardWithdrawal) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TargetSet extends ethereum.Event {
  get params(): TargetSet__Params {
    return new TargetSet__Params(this);
  }
}

export class TargetSet__Params {
  _event: TargetSet;

  constructor(event: TargetSet) {
    this._event = event;
  }

  get previousTarget(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTarget(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferFromSafe extends ethereum.Event {
  get params(): TransferFromSafe__Params {
    return new TransferFromSafe__Params(this);
  }
}

export class TransferFromSafe__Params {
  _event: TransferFromSafe;

  constructor(event: TransferFromSafe) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class deListToken extends ethereum.Event {
  get params(): deListToken__Params {
    return new deListToken__Params(this);
  }
}

export class deListToken__Params {
  _event: deListToken;

  constructor(event: deListToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Cruize__depositReceiptsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getRound(): i32 {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getUnredeemedShares(): BigInt {
    return this.value2;
  }

  getTotalDeposit(): BigInt {
    return this.value3;
  }
}

export class Cruize__shareBalancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getHeldByAccount(): BigInt {
    return this.value0;
  }

  getHeldByVault(): BigInt {
    return this.value1;
  }

  getTotalShares(): BigInt {
    return this.value2;
  }
}

export class Cruize__vaultsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getRound(): i32 {
    return this.value0;
  }

  getLockedAmount(): BigInt {
    return this.value1;
  }

  getTotalPending(): BigInt {
    return this.value2;
  }

  getQueuedWithdrawShares(): BigInt {
    return this.value3;
  }

  getCap(): BigInt {
    return this.value4;
  }
}

export class Cruize__withdrawalsResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRound(): i32 {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }
}

export class Cruize extends ethereum.SmartContract {
  static bind(address: Address): Cruize {
    return new Cruize("Cruize", address);
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  avatar(): Address {
    let result = super.call("avatar", "avatar():(address)", []);

    return result[0].toAddress();
  }

  try_avatar(): ethereum.CallResult<Address> {
    let result = super.tryCall("avatar", "avatar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(token: Address, account: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(token: Address, account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUser(token: Address, account: Address): BigInt {
    let result = super.call(
      "balanceOfUser",
      "balanceOfUser(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUser(
    token: Address,
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUser",
      "balanceOfUser(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  crContract(): Address {
    let result = super.call("crContract", "crContract():(address)", []);

    return result[0].toAddress();
  }

  try_crContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("crContract", "crContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cruizeProxy(): Address {
    let result = super.call("cruizeProxy", "cruizeProxy():(address)", []);

    return result[0].toAddress();
  }

  try_cruizeProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall("cruizeProxy", "cruizeProxy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cruizeTokens(param0: Address): Address {
    let result = super.call("cruizeTokens", "cruizeTokens(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_cruizeTokens(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "cruizeTokens",
      "cruizeTokens(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentQueuedWithdrawalShares(param0: Address): BigInt {
    let result = super.call(
      "currentQueuedWithdrawalShares",
      "currentQueuedWithdrawalShares(address):(uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_currentQueuedWithdrawalShares(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentQueuedWithdrawalShares",
      "currentQueuedWithdrawalShares(address):(uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositReceipts(
    param0: Address,
    param1: Address
  ): Cruize__depositReceiptsResult {
    let result = super.call(
      "depositReceipts",
      "depositReceipts(address,address):(uint16,uint104,uint128,uint104)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Cruize__depositReceiptsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_depositReceipts(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Cruize__depositReceiptsResult> {
    let result = super.tryCall(
      "depositReceipts",
      "depositReceipts(address,address):(uint16,uint104,uint128,uint104)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cruize__depositReceiptsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeeRecipient(): Address {
    let result = super.call(
      "getFeeRecipient",
      "getFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFeeRecipient",
      "getFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGuard(): Address {
    let result = super.call("getGuard", "getGuard():(address)", []);

    return result[0].toAddress();
  }

  try_getGuard(): ethereum.CallResult<Address> {
    let result = super.tryCall("getGuard", "getGuard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getManagementFee(totalBalanceLocked: BigInt, decimal: BigInt): BigInt {
    let result = super.call(
      "getManagementFee",
      "getManagementFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(totalBalanceLocked),
        ethereum.Value.fromUnsignedBigInt(decimal)
      ]
    );

    return result[0].toBigInt();
  }

  try_getManagementFee(
    totalBalanceLocked: BigInt,
    decimal: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getManagementFee",
      "getManagementFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(totalBalanceLocked),
        ethereum.Value.fromUnsignedBigInt(decimal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPerformanceFee(roundAPY: BigInt, decimal: BigInt): BigInt {
    let result = super.call(
      "getPerformanceFee",
      "getPerformanceFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(roundAPY),
        ethereum.Value.fromUnsignedBigInt(decimal)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPerformanceFee(
    roundAPY: BigInt,
    decimal: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPerformanceFee",
      "getPerformanceFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(roundAPY),
        ethereum.Value.fromUnsignedBigInt(decimal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gnosisSafe(): Address {
    let result = super.call("gnosisSafe", "gnosisSafe():(address)", []);

    return result[0].toAddress();
  }

  try_gnosisSafe(): ethereum.CallResult<Address> {
    let result = super.tryCall("gnosisSafe", "gnosisSafe():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guard(): Address {
    let result = super.call("guard", "guard():(address)", []);

    return result[0].toAddress();
  }

  try_guard(): ethereum.CallResult<Address> {
    let result = super.tryCall("guard", "guard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isDisable(param0: Address): boolean {
    let result = super.call("isDisable", "isDisable(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isDisable(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDisable", "isDisable(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isManagementFeeEnable(): boolean {
    let result = super.call(
      "isManagementFeeEnable",
      "isManagementFeeEnable():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isManagementFeeEnable(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isManagementFeeEnable",
      "isManagementFeeEnable():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPerformanceFeeEnabled(): boolean {
    let result = super.call(
      "isPerformanceFeeEnabled",
      "isPerformanceFeeEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isPerformanceFeeEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPerformanceFeeEnabled",
      "isPerformanceFeeEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastQueuedWithdrawAmounts(param0: Address): BigInt {
    let result = super.call(
      "lastQueuedWithdrawAmounts",
      "lastQueuedWithdrawAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastQueuedWithdrawAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastQueuedWithdrawAmounts",
      "lastQueuedWithdrawAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managementFee(): BigInt {
    let result = super.call("managementFee", "managementFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managementFee",
      "managementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  module(): Address {
    let result = super.call("module", "module():(address)", []);

    return result[0].toAddress();
  }

  try_module(): ethereum.CallResult<Address> {
    let result = super.tryCall("module", "module():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShare(token: Address): BigInt {
    let result = super.call(
      "pricePerShare",
      "pricePerShare(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_pricePerShare(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundPricePerShare(param0: Address, param1: i32): BigInt {
    let result = super.call(
      "roundPricePerShare",
      "roundPricePerShare(address,uint16):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );

    return result[0].toBigInt();
  }

  try_roundPricePerShare(
    param0: Address,
    param1: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundPricePerShare",
      "roundPricePerShare(address,uint16):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareBalances(token: Address, account: Address): Cruize__shareBalancesResult {
    let result = super.call(
      "shareBalances",
      "shareBalances(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );

    return new Cruize__shareBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_shareBalances(
    token: Address,
    account: Address
  ): ethereum.CallResult<Cruize__shareBalancesResult> {
    let result = super.tryCall(
      "shareBalances",
      "shareBalances(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cruize__shareBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  target(): Address {
    let result = super.call("target", "target():(address)", []);

    return result[0].toAddress();
  }

  try_target(): ethereum.CallResult<Address> {
    let result = super.tryCall("target", "target():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensTvl(assets: Array<Address>): Array<BigInt> {
    let result = super.call("tokensTvl", "tokensTvl(address[]):(uint256[])", [
      ethereum.Value.fromAddressArray(assets)
    ]);

    return result[0].toBigIntArray();
  }

  try_tokensTvl(assets: Array<Address>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tokensTvl",
      "tokensTvl(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  totalTokenPending(token: Address): BigInt {
    let result = super.call(
      "totalTokenPending",
      "totalTokenPending(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_totalTokenPending(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTokenPending",
      "totalTokenPending(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(param0: Address): Cruize__vaultsResult {
    let result = super.call(
      "vaults",
      "vaults(address):(uint16,uint104,uint128,uint128,uint104)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Cruize__vaultsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_vaults(param0: Address): ethereum.CallResult<Cruize__vaultsResult> {
    let result = super.tryCall(
      "vaults",
      "vaults(address):(uint16,uint104,uint128,uint128,uint104)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cruize__vaultsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  withdrawals(param0: Address, param1: Address): Cruize__withdrawalsResult {
    let result = super.call(
      "withdrawals",
      "withdrawals(address,address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Cruize__withdrawalsResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_withdrawals(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Cruize__withdrawalsResult> {
    let result = super.tryCall(
      "withdrawals",
      "withdrawals(address,address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cruize__withdrawalsResult(value[0].toI32(), value[1].toBigInt())
    );
  }
}

export class ChangeAssetStatusCall extends ethereum.Call {
  get inputs(): ChangeAssetStatusCall__Inputs {
    return new ChangeAssetStatusCall__Inputs(this);
  }

  get outputs(): ChangeAssetStatusCall__Outputs {
    return new ChangeAssetStatusCall__Outputs(this);
  }
}

export class ChangeAssetStatusCall__Inputs {
  _call: ChangeAssetStatusCall;

  constructor(call: ChangeAssetStatusCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeAssetStatusCall__Outputs {
  _call: ChangeAssetStatusCall;

  constructor(call: ChangeAssetStatusCall) {
    this._call = call;
  }
}

export class CloseTokenRoundCall extends ethereum.Call {
  get inputs(): CloseTokenRoundCall__Inputs {
    return new CloseTokenRoundCall__Inputs(this);
  }

  get outputs(): CloseTokenRoundCall__Outputs {
    return new CloseTokenRoundCall__Outputs(this);
  }
}

export class CloseTokenRoundCall__Inputs {
  _call: CloseTokenRoundCall;

  constructor(call: CloseTokenRoundCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get totalTokensBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CloseTokenRoundCall__Outputs {
  _call: CloseTokenRoundCall;

  constructor(call: CloseTokenRoundCall) {
    this._call = call;
  }
}

export class CloseTokensRoundCall extends ethereum.Call {
  get inputs(): CloseTokensRoundCall__Inputs {
    return new CloseTokensRoundCall__Inputs(this);
  }

  get outputs(): CloseTokensRoundCall__Outputs {
    return new CloseTokensRoundCall__Outputs(this);
  }
}

export class CloseTokensRoundCall__Inputs {
  _call: CloseTokensRoundCall;

  constructor(call: CloseTokensRoundCall) {
    this._call = call;
  }

  get tokensList(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get totalTokensBalance(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class CloseTokensRoundCall__Outputs {
  _call: CloseTokensRoundCall;

  constructor(call: CloseTokensRoundCall) {
    this._call = call;
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenCap(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }
}

export class DeListTokensCall extends ethereum.Call {
  get inputs(): DeListTokensCall__Inputs {
    return new DeListTokensCall__Inputs(this);
  }

  get outputs(): DeListTokensCall__Outputs {
    return new DeListTokensCall__Outputs(this);
  }
}

export class DeListTokensCall__Inputs {
  _call: DeListTokensCall;

  constructor(call: DeListTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeListTokensCall__Outputs {
  _call: DeListTokensCall;

  constructor(call: DeListTokensCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitiateWithdrawalCall extends ethereum.Call {
  get inputs(): InitiateWithdrawalCall__Inputs {
    return new InitiateWithdrawalCall__Inputs(this);
  }

  get outputs(): InitiateWithdrawalCall__Outputs {
    return new InitiateWithdrawalCall__Outputs(this);
  }
}

export class InitiateWithdrawalCall__Inputs {
  _call: InitiateWithdrawalCall;

  constructor(call: InitiateWithdrawalCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get numShares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitiateWithdrawalCall__Outputs {
  _call: InitiateWithdrawalCall;

  constructor(call: InitiateWithdrawalCall) {
    this._call = call;
  }
}

export class InstantWithdrawalCall extends ethereum.Call {
  get inputs(): InstantWithdrawalCall__Inputs {
    return new InstantWithdrawalCall__Inputs(this);
  }

  get outputs(): InstantWithdrawalCall__Outputs {
    return new InstantWithdrawalCall__Outputs(this);
  }
}

export class InstantWithdrawalCall__Inputs {
  _call: InstantWithdrawalCall;

  constructor(call: InstantWithdrawalCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InstantWithdrawalCall__Outputs {
  _call: InstantWithdrawalCall;

  constructor(call: InstantWithdrawalCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAvatarCall extends ethereum.Call {
  get inputs(): SetAvatarCall__Inputs {
    return new SetAvatarCall__Inputs(this);
  }

  get outputs(): SetAvatarCall__Outputs {
    return new SetAvatarCall__Outputs(this);
  }
}

export class SetAvatarCall__Inputs {
  _call: SetAvatarCall;

  constructor(call: SetAvatarCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAvatarCall__Outputs {
  _call: SetAvatarCall;

  constructor(call: SetAvatarCall) {
    this._call = call;
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetFeeStatusCall extends ethereum.Call {
  get inputs(): SetFeeStatusCall__Inputs {
    return new SetFeeStatusCall__Inputs(this);
  }

  get outputs(): SetFeeStatusCall__Outputs {
    return new SetFeeStatusCall__Outputs(this);
  }
}

export class SetFeeStatusCall__Inputs {
  _call: SetFeeStatusCall;

  constructor(call: SetFeeStatusCall) {
    this._call = call;
  }

  get _performanceFee(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _managementFee(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFeeStatusCall__Outputs {
  _call: SetFeeStatusCall;

  constructor(call: SetFeeStatusCall) {
    this._call = call;
  }
}

export class SetGuardCall extends ethereum.Call {
  get inputs(): SetGuardCall__Inputs {
    return new SetGuardCall__Inputs(this);
  }

  get outputs(): SetGuardCall__Outputs {
    return new SetGuardCall__Outputs(this);
  }
}

export class SetGuardCall__Inputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }

  get _guard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardCall__Outputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }
}

export class SetManagementFeeCall extends ethereum.Call {
  get inputs(): SetManagementFeeCall__Inputs {
    return new SetManagementFeeCall__Inputs(this);
  }

  get outputs(): SetManagementFeeCall__Outputs {
    return new SetManagementFeeCall__Outputs(this);
  }
}

export class SetManagementFeeCall__Inputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }

  get newManagementFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagementFeeCall__Outputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get newPerformanceFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetTargetCall extends ethereum.Call {
  get inputs(): SetTargetCall__Inputs {
    return new SetTargetCall__Inputs(this);
  }

  get outputs(): SetTargetCall__Outputs {
    return new SetTargetCall__Outputs(this);
  }
}

export class SetTargetCall__Inputs {
  _call: SetTargetCall;

  constructor(call: SetTargetCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTargetCall__Outputs {
  _call: SetTargetCall;

  constructor(call: SetTargetCall) {
    this._call = call;
  }
}

export class SetUpCall extends ethereum.Call {
  get inputs(): SetUpCall__Inputs {
    return new SetUpCall__Inputs(this);
  }

  get outputs(): SetUpCall__Outputs {
    return new SetUpCall__Outputs(this);
  }
}

export class SetUpCall__Inputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }

  get initializeParams(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetUpCall__Outputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class StandardWithdrawalCall extends ethereum.Call {
  get inputs(): StandardWithdrawalCall__Inputs {
    return new StandardWithdrawalCall__Inputs(this);
  }

  get outputs(): StandardWithdrawalCall__Outputs {
    return new StandardWithdrawalCall__Outputs(this);
  }
}

export class StandardWithdrawalCall__Inputs {
  _call: StandardWithdrawalCall;

  constructor(call: StandardWithdrawalCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StandardWithdrawalCall__Outputs {
  _call: StandardWithdrawalCall;

  constructor(call: StandardWithdrawalCall) {
    this._call = call;
  }
}

export class TransferFromSafeCall extends ethereum.Call {
  get inputs(): TransferFromSafeCall__Inputs {
    return new TransferFromSafeCall__Inputs(this);
  }

  get outputs(): TransferFromSafeCall__Outputs {
    return new TransferFromSafeCall__Outputs(this);
  }
}

export class TransferFromSafeCall__Inputs {
  _call: TransferFromSafeCall;

  constructor(call: TransferFromSafeCall) {
    this._call = call;
  }

  get _paymentToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _cruizeProxy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromSafeCall__Outputs {
  _call: TransferFromSafeCall;

  constructor(call: TransferFromSafeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
